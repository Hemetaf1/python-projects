import numpy as np
'''
This file contains a perceptron network for classifying letters with different fonts for multiple outputs.
This computer program simulates the training process of this network and the inputs to the network are 21 patterns.
'''
#Training Data set
a1 = np.array ([[-1, -1, 1, 1, -1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, 1, -1, 1, -1, -1],
                [-1, -1, 1, -1, 1, -1, -1],
                [-1, 1, 1, 1, 1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [ 1, 1, 1, -1, 1, 1, 1]])

a2 = np.array ([[-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, 1, -1, 1, -1, -1],
                [-1, -1, 1, -1, 1, -1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, 1, 1, 1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1]])

a3 = np.array ([[-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, 1, -1, 1, -1, -1],
                [-1, -1, 1, -1, 1, -1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, 1, 1, 1, 1, -1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, 1, -1, -1, -1, 1, 1]])

b1 = np.array ([[1, 1, 1, 1, 1, 1, -1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, 1, 1, 1, 1, -1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [1, 1, 1, 1, 1, 1, -1]])

b2 = np.array ([[1, 1, 1, 1, 1, 1, -1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, 1, 1, 1, 1, 1, -1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, 1, 1, 1, 1, 1, -1]])

b3 = np.array ([[1, 1, 1, 1, 1, 1, -1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, 1, 1, 1, 1, -1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [1, 1, 1, 1, 1, 1, -1]])

c1 = np.array ([[-1, -1, 1, 1, 1, 1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, -1, 1, 1, 1, 1, -1]])

c2 = np.array ([[-1, -1, 1, 1, 1, -1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, -1, 1, 1, 1, -1, -1]])

c3 = np.array ([[-1, -1, 1, 1, 1, -1, 1],
                [-1, 1, -1, -1, -1, 1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, -1, 1, 1, 1, -1, -1]])

d1 = np.array ([[1, 1, 1, 1, 1, -1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, 1, -1],
                [1, 1, 1, 1, 1, -1, -1]])

d2 = np.array ([[1, 1, 1, 1, 1, -1, -1],
                [1, -1, -1, -1, -1, 1, -1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, -1, 1],
                [1, -1, -1, -1, -1, 1, -1],
                [1, 1, 1, 1, 1, -1, -1]])

d3 = np.array ([[1, 1, 1, 1, 1, -1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, 1, -1],
                [1, 1, 1, 1, 1, -1, -1]])

e1 = np.array ([[1, 1, 1, 1, 1, 1, 1],
                [-1, 1, -1, -1, -1, -1, 1],
                [-1, 1, -1, -1, -1, -1, -1],
                [-1, 1, -1, 1, -1, -1, -1],
                [-1, 1, 1, 1, -1, -1, -1],
                [-1, 1, -1, 1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, 1],
                [1, 1, 1, 1, 1, 1, 1]])

e2 = np.array ([[1, 1, 1, 1, 1, 1, 1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, 1, 1, 1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [1, 1, 1, 1, 1, 1, 1]])

e3 = np.array ([[1, 1, 1, 1, 1, 1, 1],
                [-1, 1, -1, -1, -1, -1, -1],
                [-1, 1, -1, 1, -1, -1, -1],
                [-1, 1, 1, 1, -1, -1, -1],
                [-1, 1, -1, 1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, -1],
                [1, 1, 1, 1, 1, 1, 1]])

j1 = np.array ([[-1, -1, -1, 1, 1, 1, 1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, -1, 1, 1, 1, -1, -1]])

j2 = np.array ([[-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, -1, 1, 1, 1, -1, -1]])

j3 = np.array ([[-1, -1, -1, -1, 1, 1, 1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, -1, 1, 1, 1, -1, -1]])

k1 = np.array ([[1, 1, 1, -1, -1, 1, 1],
                [-1, 1, -1, -1, 1, -1, -1],
                [-1, 1, -1, 1, -1, -1, -1],
                [-1, 1, 1, -1, -1, -1, -1],
                [-1, 1, 1, -1, -1, -1, -1],
                [-1, 1, -1, 1, -1, -1, -1],
                [-1, 1, -1, -1, 1, -1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [1, 1, 1, -1, -1, 1, 1]])

k2 = np.array ([[1, -1, -1, -1, -1, 1, -1],
                [1, -1, -1, -1, 1, -1, -1],
                [1, -1, -1, 1, -1, -1, -1],
                [1, -1, 1, -1, -1, -1, -1],
                [1, 1, -1, -1, -1, -1, -1],
                [1, -1, 1, -1, -1, -1, -1],
                [1, -1, -1, 1, -1, -1, -1],
                [1, -1, -1, -1, 1, -1, -1],
                [1, -1, -1, -1, -1, 1, -1]])

k3 = np.array ([[1, 1, 1, -1, -1, 1, 1],
                [-1, 1, -1, -1, -1, 1, -1],
                [-1, 1, -1, -1, 1, -1, -1],
                [-1, 1, -1, 1, -1, -1, -1],
                [-1, 1, 1, -1, -1, -1, -1],
                [-1, 1, -1, 1, -1, -1, -1],
                [-1, 1, -1, -1, 1, -1, -1],
                [-1, 1, -1, -1, -1, 1, -1],
                [1, 1, 1, -1, -1, 1, 1]])


#Noisy Data Set
a1_t = np.array ([[-1,-1, 1, 1,-1,-1,-1],
                  [-1,-1, 1, 1,-1,-1,-1],
                  [-1,-1,-1, 1,-1,-1,-1],
                  [-1,-1, 1,-1, 1, 1,-1],
                  [-1,-1, 1,-1, 1,-1,-1],
                  [-1, 1, 1, 1, 1, 1,-1],
                  [-1, 1,-1, 1,-1, 1,-1],
                  [-1, 1,-1,-1,-1, 1,-1],
                  [ 1,-1, 1,-1, 1,-1, 1]])

a2_t = np.array ([[-1,-1,-1, 1,-1,-1,-1],
                  [-1,-1,-1,-1,-1,-1,-1],
                  [-1,-1,-1, 1,-1,-1,-1],
                  [-1,-1, 1,-1, 1,-1,-1],
                  [-1,-1, 1,-1,-1,-1,-1],
                  [-1, 1,-1,-1, 1, 1,-1],
                  [-1, 1, 1, 1,-1, 1,-1],
                  [ 1,-1,-1,-1,-1,-1,-1],
                  [ 1,-1,-1,-1, 1,-1, 1]])

a3 = np.array ([[-1,-1,-1, 1,-1,-1,-1],
                [-1,-1,-1, 1,-1,-1,-1],
                [-1,-1, 1,-1, 1,-1,-1],
                [-1,-1, 1,-1, 1,-1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1, 1, 1, 1, 1, 1,-1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1, 1,-1,-1,-1, 1, 1]])

b1 = np.array ([[ 1, 1, 1, 1, 1, 1,-1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1, 1, 1, 1, 1,-1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [ 1, 1, 1, 1, 1, 1,-1]])

b2 = np.array ([[1, 1, 1, 1, 1, 1,-1],
                [1,-1,-1,-1,-1,-1, 1],
                [1,-1,-1,-1,-1,-1, 1],
                [1,-1,-1,-1,-1,-1, 1],
                [1, 1, 1, 1, 1, 1,-1],
                [1,-1,-1,-1,-1,-1, 1],
                [1,-1,-1,-1,-1,-1, 1],
                [1,-1,-1,-1,-1,-1, 1],
                [1, 1, 1, 1, 1, 1,-1]])

b3 = np.array ([[ 1, 1, 1, 1, 1, 1,-1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1, 1, 1, 1, 1,-1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [ 1, 1, 1, 1, 1, 1,-1]])

c1 = np.array ([[-1,-1, 1, 1, 1, 1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1,-1, 1, 1, 1, 1,-1]])

c2 = np.array ([[-1,-1, 1, 1, 1,-1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1,-1, 1, 1, 1,-1,-1]])

c3 = np.array ([[-1,-1, 1, 1, 1,-1, 1],
                [-1, 1,-1,-1,-1, 1, 1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1,-1, 1, 1, 1,-1,-1]])

d1 = np.array ([[ 1, 1, 1, 1, 1,-1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1, 1,-1],
                [ 1, 1, 1, 1, 1,-1,-1]])

d2 = np.array ([[ 1, 1, 1, 1, 1,-1,-1],
                [ 1,-1,-1,-1,-1, 1,-1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1,-1, 1],
                [ 1,-1,-1,-1,-1, 1,-1],
                [ 1, 1, 1, 1, 1,-1,-1]])

d3 = np.array ([[ 1, 1, 1, 1, 1,-1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1, 1,-1],
                [ 1, 1, 1, 1, 1,-1,-1]])

e1 = np.array ([[ 1, 1, 1, 1, 1, 1, 1],
                [-1, 1,-1,-1,-1,-1, 1],
                [-1, 1,-1,-1,-1,-1,-1],
                [-1, 1,-1, 1,-1,-1,-1],
                [-1, 1, 1, 1,-1,-1,-1],
                [-1, 1,-1, 1,-1,-1,-1],
                [-1, 1,-1,-1,-1,-1,-1],
                [-1, 1,-1,-1,-1,-1, 1],
                [ 1, 1, 1, 1, 1, 1, 1]])

e2 = np.array ([[ 1, 1, 1, 1, 1, 1, 1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1, 1, 1, 1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1,-1,-1,-1,-1,-1,-1],
                [ 1, 1, 1, 1, 1, 1, 1]])

e3 = np.array ([[ 1, 1, 1, 1, 1, 1, 1],
                [-1, 1,-1,-1,-1,-1,-1],
                [-1, 1,-1, 1,-1,-1,-1],
                [-1, 1, 1, 1,-1,-1,-1],
                [-1, 1,-1, 1,-1,-1,-1],
                [-1, 1,-1,-1,-1,-1,-1],
                [-1, 1,-1,-1,-1,-1,-1],
                [-1, 1,-1,-1,-1,-1,-1],
                [ 1, 1, 1, 1, 1, 1, 1]])

j1 = np.array ([[-1,-1,-1, 1, 1, 1, 1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1,-1, 1, 1, 1,-1,-1]])

j2 = np.array ([[-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1,-1, 1, 1, 1,-1,-1]])

j3 = np.array ([[-1,-1,-1,-1, 1, 1, 1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1,-1,-1,-1,-1, 1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1,-1, 1, 1, 1,-1,-1]])

k1 = np.array ([[ 1, 1, 1,-1,-1, 1, 1],
                [-1, 1,-1,-1, 1,-1,-1],
                [-1, 1,-1, 1,-1,-1,-1],
                [-1, 1, 1,-1,-1,-1,-1],
                [-1, 1, 1,-1,-1,-1,-1],
                [-1, 1,-1, 1,-1,-1,-1],
                [-1, 1,-1,-1, 1,-1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [ 1, 1, 1,-1,-1, 1, 1]])

k2 = np.array ([[ 1,-1,-1,-1,-1, 1,-1],
                [ 1,-1,-1,-1, 1,-1,-1],
                [ 1,-1,-1, 1,-1,-1,-1],
                [ 1,-1, 1,-1,-1,-1,-1],
                [ 1, 1,-1,-1,-1,-1,-1],
                [ 1,-1, 1,-1,-1,-1,-1],
                [ 1,-1,-1, 1,-1,-1,-1],
                [ 1,-1,-1,-1, 1,-1,-1],
                [ 1,-1,-1,-1,-1, 1,-1]])

k3 = np.array ([[ 1, 1, 1,-1,-1, 1, 1],
                [-1, 1,-1,-1,-1, 1,-1],
                [-1, 1,-1,-1, 1,-1,-1],
                [-1, 1,-1, 1,-1,-1,-1],
                [-1, 1, 1,-1,-1,-1,-1],
                [-1, 1,-1, 1,-1,-1,-1],
                [-1, 1,-1,-1, 1,-1,-1],
                [-1, 1,-1,-1,-1, 1,-1],
                [ 1, 1, 1,-1,-1, 1, 1]])
# calculates activation function on y_in
def cal_f(y_in):
    if (y_in > theta):
        return 1
    elif (y_in < -theta):
        return -1
    else:
        return 0
# calculates y-in of every unit
def cal_y(X,W):
    return (X*W).sum()
# formats input to (1,63) array and adds bias
def format_input(input):
    X = np.reshape(input, (1,63))[0]
    return np.append(X,1)
import math
# performs one epoch
# character_ind : a:0 b:1 c:2 d:3 e:4 j:5 k:6
def learn_row(W, character_ind):
#     W = np.zeros((4,), dtype=np.int)
    Y = []
    T = []
    for i in range(len(patterns)):
        X = format_input(patterns[i])
        y = cal_f(cal_y(X,W))
        Y = np.append(Y, y)
         # determining target t
        if math.floor(i/3) == character_ind:
            t = 1
        else:
            t = -1
        T = np.append(T, t)
        # determining dW
        if (y == t):
            dW = 0*X
        else:
            dW = (alpha*t)*X
        W = W + dW
    return (W, dW, T, Y)
# learns W of all patterns for a specific character
def do_epochs(character_ind):
    W = np.zeros((64,), dtype=np.int)
    cnt = 0
    while True:
        cnt = cnt + 1
        res = learn_row(W, character_ind)
        W = res[0]
        dW = res[1]
        T = res[2]
        Y = res[3]
        # condition to end epocs
        if np.all(T == Y):
#             print('last epoc number: ',cnt)
            break
    return W
# returns a vector of outputs for a pattern
def recognize(input):
    output = []
    X = format_input(input)
    for i in range(7):
        W = do_epochs(i)
        y = cal_f(cal_y(X,W))
        output = np.append(output, y)
    return output
# functions for analysis
import random
# returns a new version of input with mistakes
def make_mistake(percent, input):
    X = input.copy()
    X = np.reshape(X, (1,63))[0]
    num_mistake = math.ceil(percent*63)
    for i in range(num_mistake):
        index = random.randint(0,62)
        X[index] = X[index]*-1
    return np.reshape(X, (9,7))

# returns a new version of input with missings
def make_missing(percent, input):
    X = input.copy()
    X = np.reshape(X, (1,63))[0]
    num_missing = math.ceil(percent*63)
    for i in range(num_missing):
        index = random.randint(0,62)
        X[index] = 9
    return np.reshape(X, (9,7))
# functions for analysis
def test_mistake(percent, input):
    zero_mistake = make_mistake(0 ,input)
    right_answer = recognize(zero_mistake)
    error_count = 0
    iterations = 1000
    for i in range(iterations):
        t = make_mistake(percent ,input)
        res = recognize(t)
        if ~np.all(res == right_answer):
            error_count = error_count + 1
    print(percent , error_count/iterations)
    
def test_missing(percent, input):
    zero_missing = make_missing(0 ,input)
    right_answer = recognize(zero_missing)
    error_count = 0
    iterations = 1000
    for i in range(iterations):
        t = make_missing(percent ,input)
        res = recognize(t)
        if ~np.all(res == right_answer):
            error_count = error_count + 1
    print(percent , error_count/iterations)
patterns = [a1, a2, a3, b1, b2, b3, c1, c2, c3, d1, d2, d2, e1, e2, e3, j1, j2, j3, k1, k2, k3]
names = ['a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3', 'd1', 'd2', 'd2', 'e1', 'e2', 'e3', 'j1', 'j2', 'j3',
         'k1', 'k2', 'k3']
alpha = 0.8
theta = 0
percents = [0.1, 0.3, 0.5, 0.7, 0.9]
alpha_list = [1, 0.8, 0.6, 0.3,0.1]
for j in range(len(alpha_list)):
    alpha = alpha_list[j]
    print('alpha is ',alpha)
    for i in range(len(percents)):
        test_mistake(percents[i],a1)

percents = [0.01, 0.05, 0.10]
for j in range(len(alpha_list)):
    alpha = alpha_list[j]
    print('alpha is ',alpha)
    for i in range(len(percents)):
        test_missing(percents[i],k1)

theta_list = [0.5,1, 2, 4, 8, 12]
alpha = 1
for j in range(len(theta_list)):
    theta = theta_list[j]
    print('theta is ',theta)
    do_epochs(6)
