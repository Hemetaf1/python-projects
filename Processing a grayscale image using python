import cv2
import numpy as np
import matplotlib.pyplot as plt

'''
In this program, a grayscale image is selected, and its histogram is equalized. The image is then converted to binary and displayed.
A low-pass filter and a high-pass filter are applied to the grayscale image, showing the resulting images, 
and edge detection operations are performed using the Sobel and Canny filters.

'''

def display_image_and_hist(image, title='Image'):
    plt.figure()
    plt.title(title)

    if len(image.shape) == 3:
        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)) 

        for i, col in enumerate(['blue', 'green', 'red']):
            hist = cv2.calcHist([image], [i], None, [256], [0, 256])
            plt.plot(hist, color=col)
        plt.xlim([0, 256])
    else:
        plt.imshow(image, cmap='gray', origin = 'lower') 
        # greyscale histogram
        plt.hist(image.ravel(), 256, [0, 256])
    plt.show()
image_path = '/home/hemetaf/abarkelas/catgrey.jpeg'  
image = cv2.imread(image_path)

if image is None:
    print(f'Error loading image `{image_path}`. Check the file path and try again.')
    exit()  
display_image_and_hist(image, 'Original Image')

# converting to greyscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
display_image_and_hist(gray_image, 'Grayscale Image')

#equalization histogram
equalized_img = cv2.equalizeHist(gray_image)
display_image_and_hist(equalized_img, 'Equalized Grayscale Image')

# converting to binary
_, binary_img = cv2.threshold(equalized_img, 128, 255, cv2.THRESH_BINARY)
display_image_and_hist(binary_img, 'Binary Image')

# اعمال فیلتر پایین‌گذر 
blur_img = cv2.GaussianBlur(equalized_img, (5, 5), 0)
display_image_and_hist(blur_img, 'Low-pass Filtered Image')

# Sobel edge discovering
sobelx = cv2.Sobel(equalized_img, cv2.CV_64F, 1, 0, ksize=5)
sobely = cv2.Sobel(equalized_img, cv2.CV_64F, 0, 1, ksize=5)
sobel_img = cv2.magnitude(sobelx, sobely)
display_image_and_hist(sobel_img, 'Sobel Edge Detection')

# Canny edge discovering
canny_edges = cv2.Canny(equalized_img, 100, 200)
display_image_and_hist(canny_edges, 'Canny Edge Detection')

#comparing the results
plt.figure()
plt.subplot(1,2,1),plt.imshow(sobel_img,cmap = 'gray')
plt.title('Sobel Edges'), plt.xticks([]), plt.yticks([])
plt.subplot(1,2,2),plt.imshow(canny_edges,cmap = 'gray')
plt.title('Canny Edges'), plt.xticks([]), plt.yticks([])
plt.show()
